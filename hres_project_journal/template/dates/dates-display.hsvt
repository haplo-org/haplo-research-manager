
std:plugin:resources("journal-dates.js" "journal-dates.css")

if(displayAdminOptions) {
    if(canForceUpdate) {
        <form method="GET" action=["/do/hres-project-journal/dates/force-update/" project]> std:form:token()
            <p><input type="submit" value=i("Force dates recalculation")></p>
        </form>
    }
    if(isSuperUser) {
        <form method="GET" action=["/do/hres-project-journal/dates/state-table/" project]> std:form:token()
            <p><input type="submit" value=i("View state table for this project")></p>
        </form>
    }
    <a href=["/do/hres-project-journal/dates/history/" project] role="button"> i("View history") </a>
}

<table id="project_dates_table">
    <tr>
        <th> </th>
        <th > i("Date completed") </th>
        unless(hideDeadlines) { <th> i("Deadline") </th> }
        if(displayAlerts) {
            <th> i("Reminder sent") </th>
        }
        
    </tr>
    each(display) {
        <tr>
            <td> displayName </td>
            within(date) {
                <td>
                    ifAll(^^{editable} isPreviousActualEditableByCurrentUser) {
                        " "
                        <a href=["/do/hres-project-journal/edit-date/previous-actual/" name "/" ^^{project}] role="button">
                            i("Add previous")
                        </a>
                        ifAny(^{hasScheduledActual} previousActuals.length) {
                            " "
                        }
                    }
                    each(previousActuals) { <i> "(" i("Previous") ") "</i> std:date(.) <br> }
                    if(actual) {
                        std:date(actual)
                    } else {
                        if(scheduled) {
                            if(previousActuals) { <i> "(" i("Next") ") "</i> }
                            std:date(scheduled)
                        } else {  
                            // If there are previous dates, then note that we're waiting a new actual
                            if(previousActuals) { <i> "(" i("Waiting next") ")"</i> }
                        }
                    }
                    if(^^{editable}) {
                        if(isScheduledActualEditableByCurrentUser) {
                            " "
                            <a href=["/do/hres-project-journal/edit-date/scheduled-actual/" name "/" ^^{project}] role="button">
                                if(^{hasScheduledActual}) { i("Edit") } else { i("Set") }
                            </a>
                        }
                    }
                </td>
                unless(^^{hideDeadlines}) {
                    do() {
                        if(requiredMax) {
                            <td class= if(^{displayGreyedDate}) {
                                    "no-longer-applicable"
                                } else {
                                    if(^{displayRequiredIsFixed}) {
                                        "admin-required-fixed"
                                    }
                                }>
                                yield:previousActual()
                                if(requiredMin){ <span class="earliest-deadline-date">std:date(requiredMin) " - "</span> }
                                std:date(requiredMax)
                                yield:isEditable()
                            </td>
                        } else {
                            <td>
                                yield:isEditable()
                            </td>
                        }
                    } previousActual {
                        if(previousActuals) {
                            <i> " (" i("Next") ")" </i>
                        }
                    } isEditable {
                        if(^^{editable}) {
                            if(isRequiredEditableByCurrentUser) {
                                if(requiredMin) { " " }
                                <a href=["/do/hres-project-journal/edit-date/required/" name "/" ^^{project}] role="button">
                                    if(requiredMin) { i("Edit") } else { i("Set") }
                                </a>
                            }
                        }
                    }
                }
                if(^^{displayAlerts}) {
                    <td class= if(^{displayGreyedDate}) {
                            "no-longer-applicable"
                        } else {
                            switch(warning) {"alert"}
                                amber {"amber-alert alert"}
                                amberBefore {"amber-alert past-alert alert"}
                                red {"red-alert alert"} 
                                redBefore {"red-alert past-alert alert"}
                                beforeDeployment {"past-alert alert"}
                        }
                    >
                        each(alerts) {
                            if(requiredMin) {
                                std:date(requiredMin) <br>
                            }
                        }
                    </td>
                }
            }
        </tr>
    }
</table>
switch(context)
{}
full {
    <a class="view-earliest" role="button">i("Show earliest submission dates...")</a>
    <a class="view-earliest" style="display:none" role="button">i("Hide earliest submission dates...")</a>
}



